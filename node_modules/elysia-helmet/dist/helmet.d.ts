import { ContentSecurityPolicyOptions } from './policies/content-security-policy';
import { CrossOriginEmbedderPolicyOptions } from './policies/cross-origin-embedder-policy';
import { CrossOriginOpenerPolicyOptions } from './policies/cross-origin-opener-policy';
import { CrossOriginResourcePolicyOptions } from './policies/cross-origin-resource-policy';
import { ReferrerPolicyOptions } from './policies/referrer-policy';
import { StrictTransportSecurityOptions } from './policies/strict-transport-security';
import { XDnsPrefetchControlOptions } from './policies/x-dns-prefetch-control';
import { XFrameOptionsOptions } from './policies/x-frame-options';
import { XPermittedCrossDomainPoliciesOptions } from './policies/x-permitted-cross-domain-policies';
type SetHeaderFunction = (header: readonly [string, string]) => void;
type RemoveHeaderFunction = (name: string) => void;
export type HelmetOptions = {
    seed?: string;
    aot?: boolean;
    contentSecurityPolicy?: ContentSecurityPolicyOptions | boolean;
    crossOriginEmbedderPolicy?: CrossOriginEmbedderPolicyOptions | boolean;
    crossOriginOpenerPolicy?: CrossOriginOpenerPolicyOptions | boolean;
    crossOriginResourcePolicy?: CrossOriginResourcePolicyOptions | boolean;
    originAgentCluster?: boolean;
    referrerPolicy?: ReferrerPolicyOptions | boolean;
} & ({
    strictTransportSecurity?: StrictTransportSecurityOptions | boolean;
    hsts?: never;
} | {
    hsts?: StrictTransportSecurityOptions | boolean;
    strictTransportSecurity?: never;
}) & ({
    xContentTypeOptions?: boolean;
    noSniff?: never;
} | {
    noSniff?: boolean;
    xContentTypeOptions?: never;
}) & ({
    xDnsPrefetchControl?: XDnsPrefetchControlOptions | boolean;
    dnsPrefetchControl?: never;
} | {
    dnsPrefetchControl?: XDnsPrefetchControlOptions | boolean;
    xDnsPrefetchControl?: never;
}) & ({
    xDownloadOptions?: boolean;
    ieNoOpen?: never;
} | {
    ieNoOpen?: boolean;
    xDownloadOptions?: never;
}) & ({
    xFrameOptions?: XFrameOptionsOptions | boolean;
    frameguard?: never;
} | {
    frameguard?: XFrameOptionsOptions | boolean;
    xFrameOptions?: never;
}) & ({
    xPermittedCrossDomainPolicies?: XPermittedCrossDomainPoliciesOptions | boolean;
    permittedCrossDomainPolicies?: never;
} | {
    permittedCrossDomainPolicies?: XPermittedCrossDomainPoliciesOptions | boolean;
    xPermittedCrossDomainPolicies?: never;
}) & ({
    xPoweredBy?: boolean;
    hidePoweredBy?: never;
} | {
    hidePoweredBy?: boolean;
    xPoweredBy?: never;
}) & ({
    xXssProtection?: boolean;
    xssFilter?: never;
} | {
    xssFilter?: boolean;
    xXssProtection?: never;
});
type SetHelmetHeaders = (setHeader: SetHeaderFunction, removeHeader: RemoveHeaderFunction, options: Readonly<HelmetOptions>) => void;
export declare const setHelmetHeaders: SetHelmetHeaders;
export {};
