import { LRUCache } from 'lru-cache';
import { logger } from './logger';
export class DefaultContext {
    constructor(maxSize = 5000) {
        this.id = (Math.random() + 1).toString(36).substring(7);
        this.maxSize = maxSize;
    }
    init(options) {
        logger(`context:${this.id}`, 'initialized with maxSize: %d, and expire duration of %d seconds', this.maxSize, options.duration / 1000);
        this.duration = options.duration;
        this.store = new LRUCache({
            max: this.maxSize,
        });
    }
    async increment(key) {
        const now = new Date();
        let item = this.store.get(key);
        if (item === undefined || item.nextReset < now) {
            logger(`context:${this.id}`, 'created new item for key: %s (reason: %s)', key, item === undefined ? 'not found' : 'expired');
            item = {
                count: 1,
                nextReset: new Date(now.getTime() + this.duration),
            };
        }
        else {
            logger(`context:${this.id}`, 'incremented count for key: %s', key);
            item.count++;
        }
        this.store.set(key, item);
        return item;
    }
    async decrement(key) {
        let item = this.store.get(key);
        if (item !== undefined) {
            logger(`context:${this.id}`, 'decremented count for key: %s', key);
            item.count--;
            this.store.set(key, item);
        }
    }
    async reset(key) {
        logger(`context:${this.id}`, 'resetting target %s', key ?? 'all');
        if (typeof key === 'string')
            this.store.delete(key);
        else
            this.store.clear();
    }
    kill() {
        logger(`context:${this.id}`, 'clearing the store');
        this.store.clear();
    }
}
