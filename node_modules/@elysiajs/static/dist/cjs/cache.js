"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/cache.ts
var cache_exports = {};
__export(cache_exports, {
  generateETag: () => generateETag,
  isCached: () => isCached
});
module.exports = __toCommonJS(cache_exports);
var import_promises = require("fs/promises");
async function isCached(headers, etag, filePath) {
  if (headers["cache-control"] && headers["cache-control"].indexOf("no-cache") !== -1)
    return false;
  if ("if-none-match" in headers) {
    const ifNoneMatch = headers["if-none-match"];
    if (ifNoneMatch === "*") return true;
    if (ifNoneMatch === null) return false;
    if (typeof etag !== "string") return false;
    const isMatching = ifNoneMatch === etag;
    if (isMatching) return true;
    return false;
  }
  if (headers["if-modified-since"]) {
    const ifModifiedSince = headers["if-modified-since"];
    let lastModified;
    try {
      lastModified = (await (0, import_promises.stat)(filePath)).mtime;
    } catch {
    }
    if (lastModified !== void 0 && lastModified.getTime() <= Date.parse(ifModifiedSince))
      return true;
  }
  return false;
}
async function generateETag(file) {
  const hash = new Bun.CryptoHasher("md5");
  hash.update(await file.arrayBuffer());
  return hash.digest("base64");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateETag,
  isCached
});
